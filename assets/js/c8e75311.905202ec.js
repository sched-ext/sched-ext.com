"use strict";(self.webpackChunksched_ext=self.webpackChunksched_ext||[]).push([[552],{8671:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"scheds/rust/scx_rlfifo/README","title":"scx_rlfifo","description":"This is a single user-defined scheduler used within schedext, which is a Linux kernel feature which enables implementing kernel thread schedulers in BPF and dynamically loading them. Read more about schedext.","source":"@site/docs/scheds/rust/scx_rlfifo/README.md","sourceDirName":"scheds/rust/scx_rlfifo","slug":"/scheds/rust/scx_rlfifo/","permalink":"/docs/scheds/rust/scx_rlfifo/","draft":false,"unlisted":false,"editUrl":"https://github.com/sched-ext/scx/blob/main/scheds/rust/scx_rlfifo/README.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"scx_p2dq","permalink":"/docs/scheds/rust/scx_p2dq/"},"next":{"title":"scx_rustland","permalink":"/docs/scheds/rust/scx_rustland/"}}');var i=n(4848),r=n(8453);const c={},d="scx_rlfifo",a={},l=[{value:"Overview",id:"overview",level:2},{value:"Typical Use Case",id:"typical-use-case",level:2},{value:"Production Ready?",id:"production-ready",level:2}];function o(e){const s={a:"a",h1:"h1",h2:"h2",header:"header",p:"p",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"scx_rlfifo",children:"scx_rlfifo"})}),"\n",(0,i.jsxs)(s.p,{children:["This is a single user-defined scheduler used within ",(0,i.jsx)(s.a,{href:"https://github.com/sched-ext/scx/tree/main",children:"sched_ext"}),", which is a Linux kernel feature which enables implementing kernel thread schedulers in BPF and dynamically loading them. ",(0,i.jsx)(s.a,{href:"https://github.com/sched-ext/scx/tree/main",children:"Read more about sched_ext"}),"."]}),"\n",(0,i.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(s.p,{children:"scx_rlfifo is a simple Round-Robin scheduler runs in user-space, based on the\nscx_rustland_core framework.\nIt dequeues tasks in FIFO order and assigns dynamic time slices, preempting and\nre-enqueuing tasks to achieve basic Round-Robin behavior."}),"\n",(0,i.jsx)(s.h2,{id:"typical-use-case",children:"Typical Use Case"}),"\n",(0,i.jsx)(s.p,{children:"This scheduler is provided as a simple template that can be used as a baseline\nto test more complex scheduling policies."}),"\n",(0,i.jsx)(s.h2,{id:"production-ready",children:"Production Ready?"}),"\n",(0,i.jsx)(s.p,{children:"Definitely not. Using this scheduler in a production environment is not\nrecommended, unless there are specific requirements that necessitate a basic\nFIFO scheduling approach. Even then, it's still recommended to use the kernel's\nSCHED_FIFO real-time class."})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>c,x:()=>d});var t=n(6540);const i={},r=t.createContext(i);function c(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);