"use strict";(self.webpackChunksched_ext=self.webpackChunksched_ext||[]).push([[631],{7525:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>d,contentTitle:()=>c,default:()=>o,frontMatter:()=>r,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"scheds/rust/scx_flash/README","title":"scx_flash","description":"This is a single user-defined scheduler used within schedext, which is a Linux kernel feature which enables implementing kernel thread schedulers in BPF and dynamically loading them. Read more about schedext.","source":"@site/docs/scheds/rust/scx_flash/README.md","sourceDirName":"scheds/rust/scx_flash","slug":"/scheds/rust/scx_flash/","permalink":"/docs/scheds/rust/scx_flash/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/scheds/rust/scx_flash/README.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"scx_bpfland","permalink":"/docs/scheds/rust/scx_bpfland/"},"next":{"title":"scx_lavd","permalink":"/docs/scheds/rust/scx_lavd/"}}');var i=t(4848),a=t(8453);const r={},c="scx_flash",d={},l=[{value:"Overview",id:"overview",level:2},{value:"Typical Use Case",id:"typical-use-case",level:2},{value:"Production Ready?",id:"production-ready",level:2}];function h(e){const s={a:"a",h1:"h1",h2:"h2",header:"header",p:"p",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"scx_flash",children:"scx_flash"})}),"\n",(0,i.jsxs)(s.p,{children:["This is a single user-defined scheduler used within ",(0,i.jsx)(s.a,{href:"https://github.com/sched-ext/scx/tree/main",children:"sched_ext"}),", which is a Linux kernel feature which enables implementing kernel thread schedulers in BPF and dynamically loading them. ",(0,i.jsx)(s.a,{href:"https://github.com/sched-ext/scx/tree/main",children:"Read more about sched_ext"}),"."]}),"\n",(0,i.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(s.p,{children:"A scheduler that focuses on ensuring fairness among tasks and performance\npredictability."}),"\n",(0,i.jsx)(s.p,{children:'It operates using an earliest deadline first (EDF) policy, where each task is\nassigned a "latency" weight. This weight is dynamically adjusted based on how\noften a task release the CPU before its full time slice is used. Tasks that\nrelease the CPU early are given a higher latency weight, prioritizing them over\ntasks that fully consume their time slice.'}),"\n",(0,i.jsx)(s.h2,{id:"typical-use-case",children:"Typical Use Case"}),"\n",(0,i.jsx)(s.p,{children:"The combination of dynamic latency weights and EDF scheduling ensures\nresponsive and consistent performance, even in overcommitted systems."}),"\n",(0,i.jsx)(s.p,{children:"This makes the scheduler particularly well-suited for latency-sensitive\nworkloads, such as multimedia or real-time audio processing."}),"\n",(0,i.jsx)(s.h2,{id:"production-ready",children:"Production Ready?"}),"\n",(0,i.jsx)(s.p,{children:"Yes."})]})}function o(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>r,x:()=>c});var n=t(6540);const i={},a=n.createContext(i);function r(e){const s=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(a.Provider,{value:s},e.children)}}}]);